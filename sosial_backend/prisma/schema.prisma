// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  email          String   @unique
  password       String
  bio            String?
  profilePicture String?
  isVerified     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  posts            Post[]
  comments         Comment[]
  likes            Like[]
  stories          Story[]
  savedPosts       SavedPost[]
  followers        Follow[]             @relation("followers")
  followings       Follow[]             @relation("following")
  storyViews       StoryView[]
  messagesSent     Message[]            @relation("messagesSent")
  messagesReceived Message[]            @relation("messagesReceived")
  postTags         PostTag[]
  collections      Collection[]
  conversetion     UserOnConversation[]
}

model Post {
  id        Int      @id @default(autoincrement())
  userID    Int
  imageUrl  File[]
  caption   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User             @relation(fields: [userID], references: [id], onDelete: Cascade)
  comments       Comment[]
  likes          Like[]
  savedPosts     SavedPost[]
  postTags       PostTag[]
  postHashtag    PostHashtag[]
  collectionPost CollectionPost[]
}

model File {
  id        String   @id @default(cuid())
  fileLink  String
  createdAt DateTime @default(now())

  posts Post[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  postID    Int
  userID    Int
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postID], references: [id], onDelete: Cascade)
  user User @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model Like {
  id        Int      @id @default(autoincrement())
  postID    Int
  userID    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postID], references: [id], onDelete: Cascade)
  user User @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@unique([postID, userID])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerID  Int
  followingID Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  follower  User @relation("followers", fields: [followerID], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingID], references: [id], onDelete: Cascade)

  @@unique([followerID, followingID])
}

model Story {
  id        Int      @id @default(autoincrement())
  userID    Int
  imageUrl  String
  type      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User        @relation(fields: [userID], references: [id], onDelete: Cascade)
  storyViews StoryView[]
}

model StoryView {
  id       Int      @id @default(autoincrement())
  storyID  Int
  viewerID Int
  viewedAt DateTime @default(now())

  story  Story @relation(fields: [storyID], references: [id], onDelete: Cascade)
  viewer User  @relation(fields: [viewerID], references: [id], onDelete: Cascade)
}

model SavedPost {
  id        Int      @id @default(autoincrement())
  postID    Int
  userID    Int
  createdAt DateTime @default(now())

  post Post @relation(fields: [postID], references: [id], onDelete: Cascade)
  user User @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model Conversation {
  id           String               @id @default(uuid())
  particapants UserOnConversation[]
  messages     Message[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  userId       Int
}

model UserOnConversation {
  userId         Int
  conversationId String
  role           String

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}

model Message {
  id             Int      @id @default(autoincrement())
  conversationID String
  senderID       Int
  receiverID     Int
  text           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationID], references: [id], onDelete: Cascade)
  sender       User         @relation("messagesSent", fields: [senderID], references: [id], onDelete: Cascade)
  receiver     User         @relation("messagesReceived", fields: [receiverID], references: [id], onDelete: Cascade)
}

model PostTag {
  id           Int      @id @default(autoincrement())
  postId       Int
  taggedUserId Int
  createdAt    DateTime @default(now())
  post         Post     @relation(fields: [postId], references: [id])
  taggedUser   User     @relation(fields: [taggedUserId], references: [id])
}

model Hashtag {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  createdAt DateTime      @default(now())
  posts     PostHashtag[]
}

model PostHashtag {
  id        Int      @id @default(autoincrement())
  postId    Int
  hashtagId Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  hashtag   Hashtag  @relation(fields: [hashtagId], references: [id], onDelete: Cascade)
}

model Collection {
  id        Int              @id @default(autoincrement())
  userId    Int
  name      String
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts     CollectionPost[]
}

model CollectionPost {
  id           Int        @id @default(autoincrement())
  collectionId Int
  postId       Int
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  post         Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
}
